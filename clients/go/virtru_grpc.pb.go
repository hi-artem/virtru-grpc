// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// VirtruClient is the client API for Virtru service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VirtruClient interface {
	Decrypt(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*DecryptReply, error)
	Encrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*EncryptReply, error)
}

type virtruClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtruClient(cc grpc.ClientConnInterface) VirtruClient {
	return &virtruClient{cc}
}

func (c *virtruClient) Decrypt(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*DecryptReply, error) {
	out := new(DecryptReply)
	err := c.cc.Invoke(ctx, "/virtru.Virtru/Decrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtruClient) Encrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*EncryptReply, error) {
	out := new(EncryptReply)
	err := c.cc.Invoke(ctx, "/virtru.Virtru/Encrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtruServer is the server API for Virtru service.
// All implementations must embed UnimplementedVirtruServer
// for forward compatibility
type VirtruServer interface {
	Decrypt(context.Context, *DecryptRequest) (*DecryptReply, error)
	Encrypt(context.Context, *EncryptRequest) (*EncryptReply, error)
	mustEmbedUnimplementedVirtruServer()
}

// UnimplementedVirtruServer must be embedded to have forward compatible implementations.
type UnimplementedVirtruServer struct {
}

func (UnimplementedVirtruServer) Decrypt(context.Context, *DecryptRequest) (*DecryptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decrypt not implemented")
}
func (UnimplementedVirtruServer) Encrypt(context.Context, *EncryptRequest) (*EncryptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encrypt not implemented")
}
func (UnimplementedVirtruServer) mustEmbedUnimplementedVirtruServer() {}

// UnsafeVirtruServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VirtruServer will
// result in compilation errors.
type UnsafeVirtruServer interface {
	mustEmbedUnimplementedVirtruServer()
}

func RegisterVirtruServer(s grpc.ServiceRegistrar, srv VirtruServer) {
	s.RegisterService(&_Virtru_serviceDesc, srv)
}

func _Virtru_Decrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtruServer).Decrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virtru.Virtru/Decrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtruServer).Decrypt(ctx, req.(*DecryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Virtru_Encrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtruServer).Encrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virtru.Virtru/Encrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtruServer).Encrypt(ctx, req.(*EncryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Virtru_serviceDesc = grpc.ServiceDesc{
	ServiceName: "virtru.Virtru",
	HandlerType: (*VirtruServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Decrypt",
			Handler:    _Virtru_Decrypt_Handler,
		},
		{
			MethodName: "Encrypt",
			Handler:    _Virtru_Encrypt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/virtru.proto",
}
